

import {
    createStore,
    applyMiddleware,
    compose,
    Store
} from "redux";
import {
    connectRouter,
    routerMiddleware
} from "connected-react-router";
import thunk from "redux-thunk";
import {
    createBrowserHistory,
    createMemoryHistory
} from "history";

import rootReducer from "./reducers";


// A nice helper to tell us if we're on the server
export const isServer = !(
    typeof window !== "undefined" &&
    window.document &&
    window.document.createElement
);


interface IStoreResponse{
    history: History;
    store: Store;
}

declare global {
    // eslint-disable-next-line @typescript-eslint/interface-name-prefix
    interface Window {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        devToolsExtension: any;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        __PRELOADED_STATE__: any;
    }
}

export default function createStoreFunction(url = "/"): IStoreResponse{

    // Create a history depending on the environment
    const history = isServer ? createMemoryHistory({ initialEntries: [url] }) : createBrowserHistory();

    const enhancers = [];

    // Dev tools are helpful
    if(process.env.NODE_ENV === "development" && !isServer){
        const developmentToolsExtension = window.devToolsExtension;

        if(typeof developmentToolsExtension === "function"){
            enhancers.push(developmentToolsExtension());
        }
    }

    const middleware = [thunk, routerMiddleware(history)];
    const composedEnhancers = compose(
        applyMiddleware(...middleware),
        ...enhancers
    );

    // Do we have preloaded state available? Great, save it.
    // eslint-disable-next-line no-underscore-dangle
    const initialState = isServer ? {} : window.__PRELOADED_STATE__;

    // Delete it once we have it stored in a variable
    if(!isServer){
        // eslint-disable-next-line no-underscore-dangle
        delete window.__PRELOADED_STATE__;
    }

    // Create the store
    const store = createStore(
        connectRouter(history)(rootReducer),
        initialState,
        composedEnhancers
    );

    return {
        history,
        store
    };
}
